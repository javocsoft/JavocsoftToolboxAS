//https://developer.android.com/studio/projects/android-library.html
apply plugin: 'com.android.library'

//For upload to Maven repository using JFROG
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"
// This is the library version used when deploying the artifact
// (change to a new version every new library release)
//
// 1.- Change version to a new one.
version = "1.0.4"
// 1.- First run "Gradle->Other->Install" to generate Maven stuff.
//     (it will run task javadocJar and sourcesJar leaving artifacts in $buildDir/libs)
// 2.- Second, execute "Gradle->Publishing->bintrayUpload" to upload the library to JCenter
// 3.- Check in https://bintray.com/javocsoft/maven/es.javocsoft%3Ajavocsofttoolbox

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        //multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //signingConfig signingConfigs.config
    }
    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /*
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }*/

    // To use old Apache Http Client
    useLibrary 'org.apache.http.legacy'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Google Play compatibility support library
    compile 'com.android.support:appcompat-v7:+'

    // Google Play services SDK
    // (https://developers.google.com/android/guides/overview)
    // (https://developers.google.com/android/guides/releases)
    // (https://developers.google.com/android/guides/setup#Install)
    // (https://developers.google.com/android/reference/packages)
    // GoogleApiClient: https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient
    //compile 'com.google.android.gms:play-services:11.0.2'

    compile 'com.google.android.gms:play-services-base:11.0.2'
    compile 'com.google.android.gms:play-services-analytics:11.0.2'
    compile 'com.google.android.gms:play-services-gcm:11.0.2'
    compile 'com.google.android.gms:play-services-drive:11.0.2'
    compile 'com.google.android.gms:play-services-location:11.0.2'
    compile 'com.google.android.gms:play-services-maps:11.0.2'
    compile 'com.google.android.gms:play-services-ads:11.0.2'

    //compile 'com.google.android.gms:play-services-places:11.0.2'
    //compile 'com.google.android.gms:play-services-auth:11.0.2'

    //Facebook SDK
    // (https://developers.facebook.com/docs/android/getting-started?locale=es_ES)
    compile group: 'com.facebook.android', name: 'facebook-android-sdk', version: '3.20.0'

    // Other external libraries required
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.5'

    testCompile 'junit:junit:4.12'

    // Testing-only dependencies
    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    /*androidTestCompile 'com.android.support:support-annotations:23.1.1'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'
    androidTestCompile 'com.android.support:support-annotations:23.1.1'*/
}

// Configuration to be able to generate POM file and upload to JCenter
def siteUrl = 'https://github.com/javocsoft/JavocsoftToolboxAS'      // Homepage URL of the library
def gitUrl = 'https://github.com/javocsoft/JavocsoftToolboxAS.git'   // Git repository URL
group = "es.javocsoft"                                               // Maven Group ID for the artifact

// POM & Maven
// Run "Gradle->Other->Install to execute this code."
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                artifactId 'toolbox'

                // Add your description here
                name 'es.javocsoft:javocsofttoolbox'
                description = 'Android library that includes modeles and a toolbox class to save time when developing applications in Android.'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'GNU General Public License v3.0'
                        url 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'javocsoft'
                        name 'Javier Gonzalez Serrano'
                        email 'javocsoft@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    //destinationDir = file("$buildDir")
    //failOnError false
}
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    //destinationDir = file("./mvnartifacts/")
//    //failOnError true
//}

import java.nio.file.Files
import java.nio.file.Paths
import java.io.FileOutputStream
import java.util.zip.ZipFile

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += configurations.provided
    //destinationDir = file("$buildDir/")

    afterEvaluate {
        // Wait after evaluation to add the android classpath
        // to avoid "buildToolsVersion is not specified" error
        classpath += files(android.getBootClasspath())

        // Process AAR dependencies
        def aarDependencies = classpath.filter { it.name.endsWith('.aar') }
        classpath -= aarDependencies
        aarDependencies.each { aar ->
            // Extract classes.jar from the AAR dependency, and add it to the javadoc classpath
            def outputPath = "$buildDir/tmp/aarJar/${aar.name.replace('.aar', '.jar')}"
            classpath += files(outputPath)

            // Use a task so the actual extraction only happens before the javadoc task is run
            dependsOn task(name: "extract ${aar.name}").doLast {
                extractEntry(aar, 'classes.jar', outputPath)
            }
        }
    }
}
// Utility method to extract only one entry in a zip file
private def extractEntry(archive, entryPath, outputPath) {
    if (!archive.exists()) {
        throw new GradleException("archive $archive not found")
    }

    def zip = new ZipFile(archive)
    zip.entries().each {
        if (it.name == entryPath) {
            def path = Paths.get(outputPath)
            if (!Files.exists(path)) {
                Files.createDirectories(path.getParent())
                Files.copy(zip.getInputStream(it), path)
            }
        }
    }
    zip.close()
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

/* Gradle task which finds source and javadoc by location/naming convention, and registers them
   in the .idea files on sync. It belongs in the root gradle file's allProjects section. As-is,
   it expects to find [projectname]/libs/lib.jar next to lib-sources.jar and/or lib-javadoc.jar.
   Also, as noted in comments, if your javadocs not pathed at "/" inside the jar, you may need to
   change the script to add "docs/html" (for example) at the end of "jar://$doc!/"
 */
task addJavaDoc {
    afterEvaluate {
        // Specify paths, this will be run per non-root project
        def projectDir = project.getProjectDir().getCanonicalPath()
        def rootDir = project.getRootDir().getCanonicalPath()
        def lib = projectDir + '/libs'

        // println lib // Uncomment this to troubleshoot
        // Get any jar dependencies register in the lib folder
        fileTree(include: ['*.jar'], exclude: ['*-source.jar', '*-javadoc.jar'], dir: lib ).each { File jar ->
            def jarName = jar.getName()
            def moduleName = jarName.substring(0, jarName.lastIndexOf("."))
            // IntelliJ does this to file names when making the xml files
            def escapedName = moduleName.replace("-", "_").replace(".", "_")
            def xmlFile = "$rootDir/.idea/libraries/${escapedName}.xml"
            // println xmlFile // Uncomment this to troubleshoot
            if (new File(xmlFile).exists()) {
                ['javadoc', 'sources'].each {String docType ->
                    // Get sources or java doc by naming convention, (expects name-sources or name-javadoc
                    def doc = "$lib/$moduleName-${docType}.jar"
                    // println doc // Uncomment this to troubleshoot
                    if(new File(doc).exists()) {
                        def xml = new XmlParser().parse(xmlFile);
                        def xmlTag = docType.toUpperCase()
                        // Perform xml replacement by convention
                        xml.library[xmlTag].replaceNode {
                            "$xmlTag" {
                                root(url: "jar://$doc!/")
                            }
                        }
                        // Write out changes
                        new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile))).print(xml)
                        // Notify that changes worked
                        println "Fixed up reference to $doc"
                    }
                }
            }
        }
    }
}




//Load properties of the project
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// Configuration to upload to JCenter
// https://github.com/bintray/gradle-bintray-plugin
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = "maven"
        // it is the name that appears in bintray when logged
        name = "es.javocsoft:javocsofttoolbox"
        desc = "It is an Android commons utility library. For HowTo and usage see the WiKi https://github.com/javocsoft/javocsoft-toolbox/wiki. This library contains a set of useful functions, classes and modules ready to use. This project is a library for Android. While i was making my own projects i always tried to reuse the written code so i created this library. It was very useful so i decided to share it with all. The idea beyond is to make easier programming for Android :) Contains a set of utility classes, the most important called \"ToolBox\", with a set of quite large collection of different functions ready to be used just by including this library in your project."
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["gpl-3.0"]
        publish = true
        publicDownloadNumbers = true
        version {
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password") //Optional. The passphrase for GPG signing'
            }
        }
    }
}

// We put at the end to avoid version conflicts with JCenter and Maven plugins.
//apply plugin: 'com.google.gms.google-services'

// This plugin and task downloads javadocs and sources when using libraries.
apply plugin: 'idea'
idea{
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}